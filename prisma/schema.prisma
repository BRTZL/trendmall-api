// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model User {
  id            String    @id @default(uuid())
  fullName      String?
  phoneNumber   String?
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          UserRole  @default(CUSTOMER)

  orders    Order[]
  addresses Address[]
  cartItems CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Address {
  id       String @id @default(uuid())
  fullName String
  address  String
  city     String
  state    String
  zipCode  String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  orders Order[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Category {
  id   String @id @default(uuid())
  name String

  parentCategory Category? @relation(name: "CategoryToParentCategory", fields: [parentId], references: [id])
  parentId       String?

  subCategories Category[] @relation(name: "CategoryToParentCategory")
  products      Product[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Product {
  id          String @id @default(uuid())
  name        String
  description String
  price       Int // Price multiplied by 100 to store decimal values
  stock       Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  images     ProductImage[]
  orderItems OrderItem[]
  cartItems  CartItem[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model ProductImage {
  id  String @id @default(uuid())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CartItem {
  id       String @id @default(uuid())
  quantity Int

  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model Order {
  id     String      @id @default(uuid())
  total  Int // Price multiplied by 100 to store decimal values
  status OrderStatus
  items  OrderItem[]

  address   Address @relation(fields: [addressId], references: [id])
  addressId String
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Int // Price multiplied by 100 to store decimal values

  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product @relation(fields: [productId], references: [id])
  productId String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}
